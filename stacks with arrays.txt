#include <iostream>
#include<cstdlib>
#include<ctime>
using namespace std;
class stack{
  public:
  int top,s[10],capacity;

  stack(){
      top=-1;
  }
  
  int size(){
      return top+1;
  }
  void push(int i){
      if(top==9){
          cout<<"stack overflow";
          
      }
      top++;
      s[top]=i;
     
  }
  int pop(){
      int data;
      if(top==-1){
          cout<<"empty";
          return -1;
      }
      data=s[top];
      top--;
      return data;
  }
  
  void print(){
      if(top==-1){
   cout<<"stack is empty";
   return;
      }
      for(int i=0;i<=top;i++){
          cout<<s[i]<<" ";
      }
  }
  
  bool isempty(){
      return (top==-1)?true:false;
  }
  
  void reverse(int size){
      
      int ptr[size];
      for(int i=size,p=0;i>=0,i--;p++){
          ptr[i]=s[p];
      }
      s[size]={0};
      
      for(int i=0;i<size;i++){
          s[i]=ptr[i];
      }
      for(int i=0;i<size;i++){
          cout<<s[i]<<" ";
      }
  }
  int average(int size){
      int avg=0;
      for(int i=0;i<size;i++){
          avg+=s[i];
      }
      return avg;
  }
  
  void sortstack(int size){
      for(int i=0;i<size;i++)
      {
          int temp=s[i];
          int j=i-1;
          while(j>=0&&s[j]>temp)
          {
            s[j+1]=s[j];
            j--;
          }
          s[j+1]=temp;
      }
  }
  int maximum(int size){
      int max=s[0];
      for(int i=0;i<size;i++){
          if(s[i]>max){
              max=s[i];
          }
      }
      return max;
  }
  int remove_max(int size){
      int max=maximum(size);
      sortstack(size);
      int popp=pop();
      return popp;
      
  }
  
    int minimum(int size){
      int min=s[0];
      for(int i=0;i<size;i++){
          if(s[i]<min){
              min=s[i];
          }
      }
      return min;
  }
  
  int binarysearch(int size,int target){
      int low=s[0];
      int high=s[size-1];
      while(low<=high){
          int mid=(high-low)/2;
          if(s[mid]==target){
              return target;
          }
          if(s[mid]<target){
              low=mid+1;
              
          }
          else{
              high=mid-1;
          }
         
      }
       return -1;
  }
};
int main()
{
    srand(time(0));
   stack s;
   int size = (sizeof(s.s) / sizeof(s.s[0]))-1;
 
   int arr[size];
   for(int i=0;i<size;i++){
       int a=rand()%19;
       arr[i]=a;
   }

for(int i=0;i<size;i++){
    s.push(arr[i]);
}
s.print();
cout<<endl<<s.remove_max(size);
cout<<endl;
s.print();

 return 0;
}